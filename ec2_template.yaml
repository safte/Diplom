---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: This template creates an instance

  Parameters:
    CommitID:
      Description: Commit ID for versioning an image
      Type: String

    VPCCIDRBlock:
      Description: The IP range for the VPC
      Type: String
      Default: 10.0.0.0/16

    SubnetACIDRBlock:
      Description: The IP range for the Subnet
      Type: String
      Default: 10.0.10.0/24

    SubnetBCIDRBlock:
      Description: The IP range for the Subnet
      Type: String
      Default: 10.0.20.0/24

  Resources:
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      DeletionPolicy: Delete
      Properties:
        BucketName: users-profile-pictures
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          IgnorePublicAcls: true

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VPCCIDRBlock
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
        - Key: Name
          Value: VPC

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref VPC
                - 'ig'

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "eu-north-1a"
        CidrBlock: !Ref SubnetACIDRBlock
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Join
              - ''
              - - !Ref VPC
                - 'public-subnet-a'

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: "eu-north-1b"
        CidrBlock: !Ref SubnetBCIDRBlock 
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Join
              - ''
              - - !Ref VPC
                - 'public-subnet-b'

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref VPC
                - 'route-table'

    Route:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    SubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnetA

    SubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnetB

    NetworkACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - VPC
                - 'network-acl'

    InboundNetworkACLTraffic:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkACL
        RuleNumber: 100
        Protocol: -1
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 0
          To: 65535

    OutboundNetworkACLTraffic:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkACL
        RuleNumber: 100
        Protocol: -1
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 0
          To: 65535

    SubnetNetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        NetworkAclId: !Ref NetworkACL

    SubnetBNetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId: !Ref PublicSubnetB
        NetworkAclId: !Ref NetworkACL

    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow ssh to client host
        VpcId: !Ref VPC
        GroupName: !Join
          - '-'
          - - VPC
            - 'sg'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1 
            CidrIp: 0.0.0.0/0

    LaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: true
        ImageId: ami-0f0b4cb72cf3eadf3
        SecurityGroups:
          - !Ref SecurityGroup
        InstanceType: t3.micro
        IamInstanceProfile: !Ref InstanceProfile
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: true
              VolumeSize: 6
        KeyName: instance-ssh-key
        LaunchConfigurationName: lc
        InstanceMonitoring: false
        UserData:
          Fn::Base64: !Sub |
             #!/bin/bash
             touch myfile.txt
             touch ${CommitID}.txt

    EC2Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EC2RoleD
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"

    RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: EC2PolicyD
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:ListAllMyBuckets"
              - "s3:DeleteObject"
            Resource:
              - "arn:aws:s3:::*/*"
              - "arn:aws:s3:::*"
        Roles:
          - !Ref EC2Role

    InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - !Ref EC2Role

    ALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Name: "application-load-balancer"
        Scheme: "internet-facing"
        SecurityGroups:
          - !Ref SecurityGroup
        Subnets:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
        Type: "application"

    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: Targets
        VpcId: !Ref VPC
        Protocol: HTTP
        Port: 5000

    HTTPlistener:
     Type: "AWS::ElasticLoadBalancingV2::Listener"
     Properties:
       DefaultActions:
         - Type: "forward"
           TargetGroupArn: !Ref TargetGroup
       LoadBalancerArn: !Ref ALB
       Port: 5000
       Protocol: "HTTP"

    ASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: asg
        MinSize: '1'
        MaxSize: '2'
        DesiredCapacity: '1'
        LaunchConfigurationName: !Ref LaunchConfiguration
        VPCZoneIdentifier:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
        TargetGroupARNs:
          - !Ref TargetGroup
        HealthCheckType: ELB
        HealthCheckGracePeriod: 300

  Outputs:
    Bucket:
      Description: Bucket Name
      Value: !Ref S3Bucket

    VPC:
      Description: VPC CIDR block
      Value: !GetAtt VPC.CidrBlock

